package cqueuetask;

public class CqueueTask {

    public static void main(String[] args) {
        task obj = new task(10);
        obj.fill();
        obj.reversing();
        obj.display();
    }
    
}

package cqueuetask;
import java.util.*;

public class task {
    Stack<Integer> stack = new Stack<>();
    Scanner input = new Scanner(System.in);
    int[] queue;
    int front;
    int rear;
    int size;
    int capacity;
    int k;
    
    public task(int capacity){
        this.capacity = capacity;
        this.queue = new int[capacity];
        this.front = 0;  
        this.rear = 0;
        this.size = 0;
        }
    
    public boolean enqueue(int value) {
        if (size == capacity) {
            System.out.println("Queue is full");
            return false;  // Queue is full
        }
        queue[rear] = value;  // Place value at the rear
        rear = (rear + 1) % capacity;  // Circular increment of rear
        size++;
        return true;
    }

    // Dequeue method to remove an element from the queue
    public Integer dequeue() {
        if (size == 0) {
            System.out.println("Queue is empty");
            return null;  // Queue is empty
        }
        int value = queue[front];
        front = (front + 1) % capacity;  // Circular increment of front
        size--;
        return value;
    }
    
    public void fill(){
        for(int i=0; i<capacity; i++){
            System.out.println("Enter a value to enqueue");
            enqueue(input.nextInt());
        }
    }
    
    public void reversing(){
        k=4;
        for(int i=0; i<k; i++){
            stack.push(dequeue());
        }
        for(int i=0; i<k; i++){
            enqueue(stack.pop());
        }
        for(int i=0; i<(capacity-k);i++){
            int a = dequeue();
            enqueue(a);
        }


    }
    
    public void display(){
        int i = front;
        System.out.print("Queue: ");
        for (int count = 0; count < size; count++) {
            System.out.print(queue[i] + " ");
            i = (i + 1) % capacity; 
        }
        System.out.println(""
                + "");
        System.out.println("front index is at : " + front);
        System.out.println("rear index is at : " + rear);
    }
    }
    
    

M -> https://prezi.com/view/W94agXiUUPCkdRNUBdpp/
H -> https://prezi.com/view/oYOPCquBvjzz2LmrDC1J/
