package circularqueue;

public class Circularqueue {

    public static void main(String[] args) {
        circular cq = new circular(5);  
        cq.enqueue(10);
        cq.enqueue(20);
        cq.enqueue(30);
        cq.enqueue(40);
        cq.enqueue(50);
        cq.enqueue(60);  

        cq.display(); 

        System.out.println(cq.dequeue());  
        System.out.println(cq.peek());     

        cq.enqueue(60);  
        cq.display();    
    }
    
}


package circularqueue;

public class circular {
    private int[] queue;  
    private int front;    
    private int rear;     
    private int size;     

    public circular(int size) {
        this.size = size;
        queue = new int[size];
        front = -1;
        rear = -1;
    }

    public boolean isEmpty() {
        return front == -1;
    }

    public boolean isFull() {
        return (rear + 1) % size == front;
    }

    public void enqueue(int item) {
        if (isFull()) {
            System.out.println("Queue is full. Cannot enqueue " + item);
        } else {
            if (front == -1) {
                front = 0;
            }
            rear = (rear + 1) % size;
            queue[rear] = item;
            System.out.println("Enqueued " + item);
        }
    }

    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue.");
            return -1; 
        } else {
            int removedItem = queue[front];
            if (front == rear) {
                front = rear = -1;
            } else {
                front = (front + 1) % size;
            }
            System.out.println("Dequeued " + removedItem);
            return removedItem;
        }
    }

    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
            return -1; 
        } else {
            return queue[front];
        }
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            int i = front;
            while (i != rear) {
                System.out.print(queue[i] + " -> ");
                i = (i + 1) % size;
            }
            System.out.println(queue[rear]);
        }
    }

}
