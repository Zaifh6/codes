package practice100;

public class MyQueue {
    int[] myQueue;
    int n;
    int r;
    int f;

    public MyQueue(int size) {
        n = size;
        myQueue = new int[n];
        r = -1;
        f = -1;
    }

    public boolean isFull() {
        return r == n - 1;  // The queue is full when rear reaches the last index
    }

    public boolean isEmpty() {
        return f == -1 || f > r;  // The queue is empty when front is -1
    }

    public void enqueue(int el) {
        if (isFull()) {
            System.out.println("Queue is full, cannot enqueue!");
            return;
        }
        r++;  // Move the rear pointer forward
        myQueue[r] = el;
        if (f == -1) {  // The queue was empty before this insertion
            f = 0;  // Set front to 0
        }
        System.out.println("Insertion successful!");
    }

    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty, cannot dequeue!");
            return -1;  // Indicate error
        }
        int stored = myQueue[f];
        if (f == r) {  // Queue becomes empty after this dequeue
            f = -1;
            r = -1;
        } else {
            f++;  // Move the front pointer forward
        }
        return stored;
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty!");
            return;
        }
        for (int i = f; i <= r; i++) {
            System.out.print(myQueue[i] + " ");
        }
        System.out.println();  // For newline after printing elements
    }
}
